/*
 * This file is part of the TYPO3 CMS project.
 *
 * It is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License, either version 2
 * of the License, or any later version.
 *
 * For the full copyright and license information, please read the
 * LICENSE.txt file that was distributed with this source code.
 *
 * The TYPO3 project - inspiring people to share!
 */
define(["require","exports","jquery","TYPO3/CMS/Core/Ajax/AjaxRequest"],(function(e,i,t,l){"use strict";var s,n;!function(e){e.toggleButton=".t3js-form-field-slug-toggle",e.recreateButton=".t3js-form-field-slug-recreate",e.inputField=".t3js-form-field-slug-input",e.readOnlyField=".t3js-form-field-slug-readonly",e.hiddenField=".t3js-form-field-slug-hidden"}(s||(s={})),function(e){e.AUTO="auto",e.RECREATE="recreate",e.MANUAL="manual"}(n||(n={}));return class{constructor(e,i){this.options=null,this.$fullElement=null,this.manuallyChanged=!1,this.$readOnlyField=null,this.$inputField=null,this.$hiddenField=null,this.request=null,this.fieldsToListenOn={},this.options=i,this.fieldsToListenOn=this.options.listenerFieldNames||{},t(()=>{this.$fullElement=t(e),this.$inputField=this.$fullElement.find(s.inputField),this.$readOnlyField=this.$fullElement.find(s.readOnlyField),this.$hiddenField=this.$fullElement.find(s.hiddenField),this.registerEvents()})}registerEvents(){const e=Object.keys(this.getAvailableFieldsForProposalGeneration()).map(e=>this.fieldsToListenOn[e]);e.length>0?("new"===this.options.command&&t(this.$fullElement).on("keyup",e.join(","),()=>{this.manuallyChanged||this.sendSlugProposal(n.AUTO)}),t(this.$fullElement).on("click",s.recreateButton,e=>{e.preventDefault(),this.$readOnlyField.hasClass("hidden")&&(this.$readOnlyField.toggleClass("hidden",!1),this.$inputField.toggleClass("hidden",!0)),this.sendSlugProposal(n.RECREATE)})):t(this.$fullElement).find(s.recreateButton).addClass("disabled").prop("disabled",!0),t(this.$inputField).on("keyup",()=>{this.manuallyChanged=!0,this.sendSlugProposal(n.MANUAL)}),t(this.$fullElement).on("click",s.toggleButton,e=>{e.preventDefault();const i=this.$readOnlyField.hasClass("hidden");this.$readOnlyField.toggleClass("hidden",!i),this.$inputField.toggleClass("hidden",i),i?(this.$inputField.val()!==this.$readOnlyField.val()?this.$readOnlyField.val(this.$inputField.val()):(this.manuallyChanged=!1,this.$fullElement.find(".t3js-form-proposal-accepted").addClass("hidden"),this.$fullElement.find(".t3js-form-proposal-different").addClass("hidden")),this.$hiddenField.val(this.$readOnlyField.val())):this.$hiddenField.val(this.$inputField.val())})}sendSlugProposal(e){const i={};e===n.AUTO||e===n.RECREATE?(t.each(this.getAvailableFieldsForProposalGeneration(),(e,l)=>{i[e]=t('[data-formengine-input-name="'+l+'"]').val()}),!0===this.options.includeUidInValues&&(i.uid=this.options.recordId.toString())):i.manual=this.$inputField.val(),this.request instanceof l&&this.request.abort(),this.request=new l(TYPO3.settings.ajaxUrls.record_slug_suggest),this.request.post({values:i,mode:e,tableName:this.options.tableName,pageId:this.options.pageId,parentPageId:this.options.parentPageId,recordId:this.options.recordId,language:this.options.language,fieldName:this.options.fieldName,command:this.options.command,signature:this.options.signature}).then(async i=>{const t=await i.resolve(),l="/"+t.proposal.replace(/^\//,"");t.hasConflicts?(this.$fullElement.find(".t3js-form-proposal-accepted").addClass("hidden"),this.$fullElement.find(".t3js-form-proposal-different").removeClass("hidden").find("span").text(l)):(this.$fullElement.find(".t3js-form-proposal-accepted").removeClass("hidden").find("span").text(l),this.$fullElement.find(".t3js-form-proposal-different").addClass("hidden")),this.$hiddenField.val()!==t.proposal&&this.$fullElement.find("input").trigger("change"),e===n.AUTO||e===n.RECREATE?(this.$readOnlyField.val(t.proposal),this.$hiddenField.val(t.proposal),this.$inputField.val(t.proposal)):this.$hiddenField.val(t.proposal)}).finally(()=>{this.request=null})}getAvailableFieldsForProposalGeneration(){const e={};return t.each(this.fieldsToListenOn,(i,l)=>{t('[data-formengine-input-name="'+l+'"]').length>0&&(e[i]=l)}),e}}}));